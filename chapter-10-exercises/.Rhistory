# Part 3: Question 3
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Part 3: Question 4
squared_median <- median(squared_numbers)
print(squared_median)
# Part 3: Question 5
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
#################
#### PART 4 #####
#################
# Part 4: Question 1
spring_break <- ("2020-03-21")
spring_break <- as.Date(spring_break)
# Part 4: Question 2
# Chceking if pring_break_date has a date class
# class(spring_break_date)
# Part 4: Question 3
today <- Sys.Date ()
# print(today)
# Part 4: Question 4
days_to_break <- (spring_break - today)
print(days_to_break)
# Part 4: Question 5
# the change_year function takes two argurment date (as Date-type value), a year and
# returns a new Date-type value that represents the argument date with a given year
change_year <- function(date, year) {
date_as_string <- as.character(date)
sub_date <- substr(date_as_string, 5, 10)
sub_year <- paste0(year, sub_date)
return(as.Date(sub_year))
}
change_year("1999-07-19", 2025)
# Part 4: Question 6
spring_break_2025 <- change_year(spring_break, 2025)
# class(spring_break_2025)
# Part 4: Question 7
# the date_has_passed function takes a date (as Date-type value) as an argument
# and returns a boolean representing whether that date has already occurred
date_has_passed <- function(date) {
today_date <- Sys.Date()
return((today_date - date) > 0)
}
# Part 4: Question 8
date_has_passed(as.Date("2020-01-20"))
# Part 4: Question 9
birthdays <- list (Nahid = as.Date("1999-07-19"), Brother = as.Date("1995-09-26"), Mother = as.Date("1968-09-18"), Father = as.Date("1958-07-05"))
print(birthdays)
# Part 4: Question 10
# The get_next_birthday function takes a birthdate (as Date-type value) as an argument
# and returns a Date-type value representing the date of that person's next birthday
get_next_birthday <- function(date) {
upcoming_birthday <- change_year(as.Date(date), 2020)
# the if statment checks if the date assigned has passed in
# the current year if so then it changes it to 2021
if (date_has_passed(upcoming_birthday)) {
date1 <- change_year(as.Date(date), 2021)
} else {
date1 <- change_year(as.Date(date), 2020)
}
return(date1)
}
# Part 4: Question 11
get_my_next_birthday <- get_next_birthday(birthdays$Nahid)
print(get_my_next_birthday)
# Part 4: Question 12
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
# Installed styler and stored it to account for styling erros
library("styler")
print(get_my_next_birthday)
print(next_birthdays)
# Nahid Mohammed
# Informatics 201, Homework 2
#################
#### PART 1 #####
#################
# Installed styler and stored it to account for styling erros
# library("styler")
# installed the stringr here
# Part 1: Part of question 6
# install.packages(("stringr"))
library("stringr")
# Part 1: Question 1
my_age <- 20
# Part 1: Question 2
my_name <- ("Nahid Mohammed")
# Part 1: Question 3
# The make_introduction function takes two argumrnts
# and retunrs the introduction sentence
make_introduction <- function(name, age) {
my_introduction <- paste("Hello, my name is", name, "and I'm", age, "years old")
return(my_introduction)
}
# Part 1: Question 4
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Part 1: Question 5
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
# Part 1: Question 6
capital_intro <- str_to_title(my_intro)
print(capital_intro)
# Part 1: Question 7
intro_e_count <- str_count(my_intro, pattern = "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
# Part 2: Question 1
books <- c("The Subprimes","Binti", "IT", "The Sea and Summer", "The Contingency Plan", "Harry Potter")
print(books)
# Part 2: Question 2
top_three_books <- books[1:3]
print(top_three_books)
# Part 2: Question 3
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# Part 2: Question 4
# The remove_book function takes two argument to remove a specified book from
# the books vector and returns the new vector withuot the specified book
remove_book <- function(title, index) {
skip_title <- title[-index]
return(skip_title)
}
# Part 2: Question 5
books_without_five <- remove_book(books, 5)
print(books_without_five)
# Part 2: Question 6
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
# Part 3: Question 1
numbers <- seq(from = 1, to = 201)
# Part 3: Question 2
squared_numbers <- numbers * numbers
# Part 3: Question 3
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Part 3: Question 4
squared_median <- median(squared_numbers)
print(squared_median)
# Part 3: Question 5
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
#################
#### PART 4 #####
#################
# Part 4: Question 1
spring_break <- ("2020-03-21")
spring_break <- as.Date(spring_break)
# Part 4: Question 2
# Chceking if pring_break_date has a date class
# class(spring_break_date)
# Part 4: Question 3
today <- Sys.Date ()
# print(today)
# Part 4: Question 4
days_to_break <- (spring_break - today)
print(days_to_break)
# Part 4: Question 5
# the change_year function takes two argurment date (as Date-type value), a year and
# returns a new Date-type value that represents the argument date with a given year
change_year <- function(date, year) {
date_as_string <- as.character(date)
sub_date <- substr(date_as_string, 5, 10)
sub_year <- paste0(year, sub_date)
return(as.Date(sub_year))
}
change_year("1999-07-19", 2025)
# Part 4: Question 6
spring_break_2025 <- change_year(spring_break, 2025)
# class(spring_break_2025)
# Part 4: Question 7
# the date_has_passed function takes a date (as Date-type value) as an argument
# and returns a boolean representing whether that date has already occurred
date_has_passed <- function(date) {
today_date <- Sys.Date()
return((today_date - date) > 0)
}
# Part 4: Question 8
date_has_passed(as.Date("2020-01-20"))
# Part 4: Question 9
birthdays <- list (Nahid = as.Date("1999-07-19"), Brother = as.Date("1995-09-26"), Mother = as.Date("1968-09-18"), Father = as.Date("1958-07-05"))
print(birthdays)
# Part 4: Question 10
# The get_next_birthday function takes a birthdate (as Date-type value) as an argument
# and returns a Date-type value representing the date of that person's next birthday
get_next_birthday <- function(date) {
upcoming_birthday <- change_year(as.Date(date), 2020)
# the if statment checks if the date assigned has passed in the current year
# if so then it changes it to 2021, if not that then keeps it as 2020
if (date_has_passed(upcoming_birthday)) {
date1 <- change_year(as.Date(date), 2021)
} else {
date1 <- change_year(as.Date(date), 2020)
}
return(date1)
}
# Part 4: Question 11
get_my_next_birthday <- get_next_birthday(birthdays$Nahid)
print(get_my_next_birthday)
# Part 4: Question 12
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
me <- c("Ada", "Bob", "Chris", "Diya", "Emma")
# A vector of heights
height <- c(64, 74, 69, 69, 71)
# A vector of weights
weight <- c(135, 156, 139, 144, 152)
# Combine the vectors into a data frame
# Note the names of the variables become the names of the columns!
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
name <- c("Ada", "Bob", "Chris", "Diya", "Emma")
# A vector of heights
height <- c(64, 74, 69, 69, 71)
# A vector of weights
weight <- c(135, 156, 139, 144, 152)
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
print(people)
people$name
View(people)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
?runif
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments)
print(salaries)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
print(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries_2017 + adjustments
print(salaries_2018)
print(salaries)
print(salaries)
salaries$raise <- (salaries_2017 < salaries_2018)
print(salaries)
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
print(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries_2017 + adjustments
print(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- (salaries$salaries_2017 < salaries$salaries_2018)
print(salaries)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
print(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries_2017 + adjustments
print(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- (salaries$salaries_2017 < salaries$salaries_2018)
print(salaries)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
salaries[salaries$employees == emplotee 40, 3]
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
salaries[salaries$employees == employee 40, 3]
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
salaries[salaries$employees == "employee 40", 3]
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
salaries[salaries$employees == "employee 1", "salaries_2017"]
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
salaries[salaries$employees == "employee 1", salaries_2017]
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "employee 57", salaries_2018]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
print(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries_2017 + adjustments
print(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- (salaries$salaries_2017 < salaries$salaries_2018)
print(salaries)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "employee 57", salaries_2018]
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "employee 57", "salaries_2018"]
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
got_raise <- (salaries$raise == TRUE)
print(got_raise)
# How many employees got a raise?
salaries[(salaries$raise == TRUE, ])
# How many employees got a raise?
nrow(salaries[(salaries$raise == TRUE, ])
# How many employees got a raise?
nrow(salaries[(salaries$raise == TRUE,])
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE,])
nrow(salaries[salaries$raise == TRUE,])
print(got_raise)
# What was the dollar value of the highest raise?
salraies[salaries$adjustments == max(adjustments)]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(adjustments)]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max()]
max(salaries$adjustments)
# What was the dollar value of the highest raise?
biggest_raise <- max(salaries$adjustments)
salaries[salaries$adjustments == max()]
salaries[ salaries$adjustments == biggest_raise]
salaries[ salaries$adjustments == biggest_raise]
salaries[ salaries$adjustments == max(salaries$adjustments]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments)]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[ salaries$employees, == max(salaries$adjustments)]
# What was the "name" of the employee who received the highest raise?
salaries[ salaries$employees, max(salaries$adjustments)]
# What was the largest decrease in salaries between the two years?
salaries[salaries$adjustments == min(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
?sim
?sum
# What was the average salary change?
salaries[sum(salaries$adjustments)]
# What was the average salary change?
salaries[(mean(salaries$adjustments)]
# What was the average salary change?
mean(salaries$adjustments)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
print(salaries)
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$adjustments == min(salaries$adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$adjustments == min(salaries$adjustments))
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$adjustments == min(salaries$adjustments))
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$raise == FALSE, "adjustments")
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[(salaries$raise == FALSE, "adjustments")]
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == FALSE, "adjustments"])
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
print(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries_2017 + adjustments
print(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- (salaries$salaries_2017 < salaries$salaries_2018)
print(salaries)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE,])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$adjustments == min(salaries$adjustments), "adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
# What was the average salary change?
mean(salaries$adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == FALSE, "adjustments"])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
NO
# Write a .csv file of your salary data to your working directory
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == FALSE, "adjustments"])
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == FALSE, salaries$adjustments])
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == FALSE, adjustments"])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == FALSE, adjustments"])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == FALSE, adjustments"])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == FALSE, "adjustments"])
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == FALSE, "adjustments"])
getwd()
pwd
setwd()
setwd(/Users/nahid/Desktop/book-exercises/chapter-10-exercises)
> setwd("/Users/nahid/Desktop/book-exercises/chapter-10-exercises")
> > setwd("/Users/nahid/Desktop/book-exercises/chapter-10-exercises")
setwd("/Users/nahid/Desktop/book-exercises/chapter-10-exercises")
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "Salariesdataframe.csv")
